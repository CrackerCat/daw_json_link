IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
  FIND_PACKAGE(Git)
  IF(GIT_FOUND)
	EXECUTE_PROCESS(
	  COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
	  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
	  OUTPUT_VARIABLE "BUILD_VERSION"
	  ERROR_QUIET
	  OUTPUT_STRIP_TRAILING_WHITESPACE)
	MESSAGE( STATUS "Git version: ${BUILD_VERSION}" )
  ELSE(GIT_FOUND)
	SET(BUILD_VERSION "unknown")
  ENDIF(GIT_FOUND)
  add_definitions( -DSOURCE_CONTROL_REVISION="${BUILD_VERSION}" )
ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)

set(DAW_JSON_USE_SANITIZERS OFF CACHE STRING "Enable address and undefined sanitizers")
if (MSVC)
    message("MSVC detected")
    add_definitions(-DNOMINMAX -DD_WIN32_WINNT=0x0601)
    add_compile_options("/permissive-")
else ()
    if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "AppleClang")
        message("Clang detected")
        add_compile_options( -Wall -Wextra -pedantic -Weverything -Wno-c++98-compat -Wno-covered-switch-default -Wno-padded -Wno-exit-time-destructors -Wno-c++98-compat-pedantic -Wno-unused-parameter -Wno-missing-noreturn -Wno-missing-prototypes -Wno-disabled-macro-expansion -Wno-missing-braces -Wno-unneeded-internal-declaration -Wunreachable-code -Wno-tautological-type-limit-compare -Wno-return-std-move-in-c++11 -Wno-float-equal -Wzero-as-null-pointer-constant -Wno-unused-macros)
        if (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
            add_compile_options(-march=native)
        endif ()
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")

        if (DAW_JSON_USE_SANITIZERS)
			message( "Using sanitizers" )
            #set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=null")
            #set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=null")
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=undefined")
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=address")
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined")
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")
        endif ()
        if (CMAKE_BUILD_TYPE STREQUAL "coverage" OR CODE_COVERAGE)
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fprofile-instr-generate -fcoverage-mapping")
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-instr-generate -fcoverage-mapping")
        endif ()
    elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
        message("Gcc detected")
        add_compile_options(-Wall -Wextra -pedantic -Wa,-mbranches-within-32B-boundaries -Wno-deprecated-declarations -Wduplicated-cond -Wlogical-op -Wnull-dereference -Wold-style-cast -Wshadow -Wzero-as-null-pointer-constant -Wdisabled-optimization)
        if (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
            add_compile_options(-march=native)
        endif ()
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")

        if (DAW_JSON_USE_SANITIZERS)
			message( "Using sanitizers" )
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=undefined")
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=address")
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined")
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")
        endif ()
    else ()
        message("Unknown compiler id ${CMAKE_CXX_COMPILER_ID}")
    endif ()
endif ()

